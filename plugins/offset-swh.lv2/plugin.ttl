@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .

swh:offset a :Plugin ;
   a :UtilityPlugin ;

   doap:name "Offset, sample-based" ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#offset> ;

   :pluginProperty :hardRtCapable ;
    
   :port [
     a :InputPort, :ControlPort ;
     :name "offset (in samples)" ;
     :index 0 ;
     :symbol "offset" ;
     :minimum -24000 ;
     :maximum 24000 ;
     :rangeSteps 48001 ;
     :default 0.0 ;
     :portProperty :causesArtifacts ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "automatable (possibly adds playback delay)" ;
     :index 1 ;
     :symbol "automatable" ;
     :default 0.0 ;
     :portProperty :toggled ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 2 ;
     :symbol "input" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output" ;
     :index 3 ;
     :symbol "output" ;
   ] ;
  
   :port [
     a :OutputPort, :ControlPort ;
     :name "latency" ;
     :index 4 ;
     :symbol "latency" ;
     :portProperty :reportsLatency ;
   ] ;
  
   swhext:code """
      #include "ladspa-util.h"
      #define MAX_OFFSET 24000
      #define BUFFER_LEN (MAX_OFFSET*2 + 1)
      #define BUFFER_POS(a) (((a) + BUFFER_LEN) % BUFFER_LEN)
      #define MAX(a, b) ((a) > (b) ? (a) : (b))
      #define MIN(a, b) ((a) < (b) ? (a) : (b))
    """ ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
      buffer = calloc(BUFFER_LEN, sizeof(LADSPA_Data));
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
      memset(buffer, 0, BUFFER_LEN * sizeof(LADSPA_Data));
      plugin_data->buffer_w_pos = 0;
      plugin_data->last_offset = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "cleanup" ;
     swhext:code """
      free(plugin_data->buffer);
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """

      long buffer_r_pos, offset_delta, i;

      if (automatable > 0) {

        // report the maximum offset as latency to the host
        *(plugin_data->latency) = MAX_OFFSET;

        // and delay by the maximum offset by default
        // (results in no audible offset)
        buffer_r_pos = BUFFER_POS(buffer_w_pos - MAX_OFFSET);

        // apply user-configured offset (results in the desired offset):
        buffer_r_pos = BUFFER_POS(buffer_r_pos + (long)offset);

      } else {
        // report the currently required latency
        // (the LV2 specification does not allow a negative latency)
        *(plugin_data->latency) = MAX((long)offset, 0);

        // if delaying, apply the configured offset
        // (otherwise we rely on the host's latency compensation)
        buffer_r_pos = BUFFER_POS(buffer_w_pos + MIN((long)offset, 0));
      }

      // if the offset increased, zero the buffer accordingly
      offset_delta = (long)offset - last_offset;
      for (; offset_delta>0; offset_delta--) {
        buffer[BUFFER_POS(buffer_r_pos - offset_delta)] = 0.0f;
      }

      for (i=0; i<sample_count; i++) {
        buffer[buffer_w_pos] = input[i];
        buffer_w_pos = BUFFER_POS(buffer_w_pos + 1);

        buffer_write(output[i], buffer[buffer_r_pos]);
        buffer[buffer_r_pos] = 0.0f;
        buffer_r_pos = BUFFER_POS(buffer_r_pos + 1);
      }

      plugin_data->buffer_w_pos = buffer_w_pos;
      plugin_data->last_offset = (long)offset;

    """ ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> .
